<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creational Pattern on Life Story</title>
    <link>https://ianjustin39.github.io/ianlife/tags/creational-pattern/</link>
    <description>Recent content in Creational Pattern on Life Story</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 21 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ianjustin39.github.io/ianlife/tags/creational-pattern/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>組一台電腦 - 生成器模式 | Builder Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/builder-pattern/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/builder-pattern/</guid>
      <description>本系列文章同步分享於IT邦幫忙第12屆鐵人賽
   Design Pattern 系列文章導讀     Design Pattern可以說是開發上大家都會遇到的一個課題， 這系列文會從Design Principles、各種design pattern到最後的Anti-Patterns &amp; Code Smells介紹下去，讓我們可以更了解各種pattern的使用時機與場合。 預計目標主題如下，若有哪部分不熟的章節可以直接點進去看 註：可以利用Online Java Compiler IDE或 Online Java Compiler IDE來跑範例程式碼。      設計模式 - 入門篇  什麼是Design Pattern? Design Pattern的類型與原則    設計模式 - 原則篇 | Design Principles  我的購物車 - 單一職責原則 | Single Responsibility Principle 支付系統 - 開閉原則 | Open/Closed Principle 老鷹與企鵝 - 里氏替換原則 | Liskov Substitution Principle 公司內的工程師 - 介面隔離原則 | Interface Segregation Principle 銀行付款系統 - 依賴反轉原則 | Dependency Inversion Principle 汽油車 &amp; 電動車 - 合成/聚合複用原則 | Composite/Aggregate Reuse Principle 與BillGates握手 - 迪米特法則 | Law of Demeter    設計模式 - 創建型模型篇 | Creational Patterns  超市與送貨員 - 單例模式 | Singleton Pattern 開一間餐廳 - 工廠模式 | Factory Pattern 台式餐廳 &amp; 義式餐廳 - 抽象工廠模式 | Abstract Factory Pattern 組一台電腦 - 生成器模式 | Builder Pattern 影分身之術 - 原型模式 | Prototype Pattern    設計模式 - 結構型模型篇 | Structural Patterns  小紅帽與大野狼 - 適配器模式 | Adapter Pattern 女朋友的LV包包 - 橋接模式 | Bridge Pattern 中秋節烤肉節 - 组合模式 | Composite Pattern I am Optimus Prime - 裝飾者模式 | Decorator Pattern 銀行貸款 - 外觀模式 | Facade Pattern CEO的名片 - 享元模式 | Flyweight Pattern 出國代購團 - 代理模式 | Proxy Pattern    設計模式 - 行為型模型篇 | Behavioural Patterns  Chain of Responsibility Pattern 老闆與秘書 - 命令模式 | Command Pattern Iterator Pattern Interpreter Pattern Mediator Pattern Memento Pattern Observer Pattern State Pattern Strategy Pattern Template Pattern Visitor Pattern    設計模式 - 番外篇  Anti-Patterns Code Smells Design Pattern VS 演算法       定義    把一個複雜物件的建構與樣貌分離，如此相同的建構過程可以產生不同樣貌的物件</description>
    </item>
    
    <item>
      <title>台式餐廳 &amp; 義式餐廳 - 抽象工廠模式 | Abstract Factory Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/abstract-factory-pattern/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/abstract-factory-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>開一間餐廳 - 工廠模式 | Factory Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/factory-pattern/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/factory-pattern/</guid>
      <description></description>
    </item>
    
    <item>
      <title>超市與送貨員 - 單例模式 | Singleton Pattern</title>
      <link>https://ianjustin39.github.io/ianlife/design-pattern/singleton-pattern/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://ianjustin39.github.io/ianlife/design-pattern/singleton-pattern/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>